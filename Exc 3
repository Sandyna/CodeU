Exc 3
Questions:
We can have several identical values in the array, for example {3, 4, 4, 5}. If that's the case, nthLargest(3) would 
return 4 or 3? Would nthLargest(2) return the same value as nthLargest(3)? Can we have identical return values for 
different inputs? I will work with that case. 
Thoughts on the problem:
We can sort it. O(s log s) where s is the size of array
We can go through the array n-times to find out which is the n-th largest. O(n*s) or O(s^2) in the worst case. 
We can have an array with n largest elements. I don't know how I can update it though. 
For each element, we can tell in linear time at which position it is and which elements are smaller/bigger/same than it. 

TestCases:
testOne = {7, 4, 6, 1}
nthLargest = {4}

Code:
class largest{
List <Integer> integers;
  largest (List<Integer> input){
    integers = input;
  }
  nthLargest(int n){
    integers.sort;
    integers.reversel
    return integers.get(n);
  }
}
