Exc 1
Questions: 
Is the dictionary in alphabetical order? 
Thoughts on the problem: 
Obvious but slow solution is to go through all the words in the given dictionary that are "smaller" than my word. 
To fasten this up, I  can use a binary search. I can't use classic binary search since I don't know the length of the dictionary. 
Instead of this, I could use a modified version which goes from the start, always jumping forward by an increasing power of two. (2, 4, 8...)
Since that approach is messy, I will use the classic binary search because it's easier to code and I will set the 
upperBound to a really big number. 
Questions for myself: What if the word isn't in the dictionary? How can I set the upperBound? (in the first part, when going up)
Beware the last element. 
Test cases:
Case one:
TrivialDictionary = {"", "boo", "foo", "moo", "zoo"};
isInDictionary("canary") = false;
isInDictionary("foo") = true;
isInDictionary("") = true;
Case two:
TrivialDictionary = {"boo", "foo", "moo", "zoo"};
isInDictionary("") = false;
isInDictionary("zoo") = true;
isInDictionary("boo") = true;

Code:

    public boolean isInDictionary(String word){
        int upperBound = 999999999, lowerBound = 0;
        while(upperBound-lowerBound != 1){
            if(word == wordAt((lowerBound))){
                return true;
            }
            if((wordAt((upperBound+lowerBound)/2) == null) ||
                    (word.compareTo((String) wordAt((upperBound+lowerBound)/2))<0)){
                upperBound = (upperBound+lowerBound)/2;
            } else {
                lowerBound = (upperBound+lowerBound)/2;
            }
        }
        if(word == wordAt(lowerBound)){
            return true;
        }
        return false;
    }
